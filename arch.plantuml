@startuml Arch
skinparam nodesep 4
!include <archimate/Archimate>

title "Cool Tools Architecture"

rectangle "Microservices" <<$archimate/business-function>> #Business{
    rectangle "APIs" <<$archimate/business-function>> #Business{
        archimate #Application "UserAPI:9001\n(Java/SpringBoot)" as UserAPI <<application-service>>
        archimate #Application "ProductAPI:9002\n(Java/SpringBoot)" as ProductAPI <<application-service>>
        archimate #Application "BasketAPI:9003\n(Java/PlayFramework)" as BasketAPI <<application-service>>
        archimate #Application "OrderAPI:9004\n(Go)" as OrderAPI <<application-service>>
        archimate #Application "InvoiceAPI:9005\n(Java/Quarkus)" as InvoiceAPI <<application-service>>
    }

    rectangle "Databases" <<$archimate/business-function>> #Business{
        archimate #Technology "Users\n(mem:H2)" as UsersDB <<technology-service>>
        archimate #Technology "Products:9012\n(PostgreSQL)" as ProductsDB <<technology-service>>
        archimate #Technology "Baskets\n(Java map)" as BasketsDB <<technology-service>>
        archimate #Technology "Orders:9014\n(MongoDB)" as OrdersDB <<technology-service>>
        archimate #Technology "Invoices\n(mem:H2)" as InvoicesDB <<technology-service>>
    }

    rectangle "Fronts" <<$archimate/business-function>> #Business{
        archimate #Application "Shop:5173\n(Vue 3)" as ShopFront <<application-service>>
    }
}

rectangle "Infrastructure" <<$archimate/business-function>> #Business{
    archimate #Technology "Kafka:9092" as Kafka <<technology-service>>
    archimate #Technology "Zookeeper:2181" as Zookeeper <<technology-service>>
    archimate #Technology "Inbucket:2500" as InbucketSMTP <<technology-service>>
    archimate #Technology "Papermerge Worker" as PapermergeWorker <<technology-service>>

    archimate #Application "Zipkin:9411" as Zipkin <<application-service>>
    archimate #Application "Grafana:3000" as Grafana <<application-service>>
    archimate #Application "Prometheus:9090" as Prometheus <<application-service>>
    archimate #Application "Kafka UI:8085" as KafkaUI <<application-service>>
    archimate #Application "Papermerge UI:12000" as PapermergeWeb <<application-service>>
    archimate #Application "Inbucket UI:9000" as InbucketUI <<application-service>>

    archimate #Technology "OpenTelemetry Collector" as OTC <<technology-service>>
    archimate #Technology Loki <<technology-service>>
    archimate #Technology Redis <<technology-service>>

    archimate #Technology "Kong:8000" as Kong <<technology-service>>
    archimate #Application "Kong UI:8002" as KongUI <<application-service>>
    archimate #Technology "Kong\n(PostgreSQL)" as KongDB <<technology-service>>

    Rel_Access_rw(Kong, KongDB)
    Rel_Access_rw(KongUI, Kong)
}

rectangle "Outer World" <<$archimate/technology-service>> #Technology{
    archimate #Technology "https://api.vatcomply.com" as vatcomply <<technology-service>>
}

Rel_Access_rw(UserAPI, UsersDB, CRUD)
Rel_Access_rw(ProductAPI, ProductsDB, CRUD)
Rel_Access_rw(BasketAPI, BasketsDB, CRUD)
Rel_Access_rw(OrderAPI, OrdersDB, CRUD)
Rel_Access_rw(InvoiceAPI, InvoicesDB, CRUD)

Rel_Access_r(ShopFront, Kong, users-api)
Rel_Access_r(Kong, UserAPI)
Rel_Access_r(ShopFront, ProductAPI)
Rel_Access_r(ShopFront, BasketAPI)
Rel_Access_r(ShopFront, OrderAPI)
Rel_Access_r(ShopFront, InvoiceAPI)

Rel_Access_r(Kong, OrderAPI, getAllUsers)
Rel_Access_r(ProductAPI, OrderAPI, getAllProducts)

Rel_Access_r(KafkaUI, Kafka)
Rel_Access_r(Kafka, Zookeeper)
Rel_Flow(OrderAPI, Kafka, topic:orders)
Rel_Flow(Kafka, InvoiceAPI, topic:orders)

Rel_Flow(InvoiceAPI, vatcomply, geolocate)

Rel_Flow(PapermergeWeb, PapermergeWorker)
Rel_Flow(PapermergeWeb, Redis)
Rel_Flow(PapermergeWorker, Redis)
Rel_Flow(InvoiceAPI, PapermergeWeb, "invoice.pdf")

Rel_Flow(InbucketUI, InbucketSMTP)
Rel_Flow(InvoiceAPI, InbucketSMTP, "Email w/ invoice.pdf")

Rel_Flow(UserAPI, OTC, logs)
Rel_Flow(UserAPI, OTC, metrics)
Rel_Flow(UserAPI, OTC, spans)

Rel_Flow(ProductAPI, OTC, logs)
Rel_Flow(ProductAPI, OTC, metrics)
Rel_Flow(ProductAPI, OTC, spans)

Rel_Flow(BasketAPI, OTC, logs)
Rel_Flow(BasketAPI, OTC, metrics)
Rel_Flow(BasketAPI, OTC, spans)

Rel_Flow(OrderAPI, OTC, spans)

Rel_Flow(InvoiceAPI, OTC, spans)

Rel_Flow(Prometheus, UserAPI, "scrape\nmetrics")
Rel_Flow(Prometheus, ProductAPI, "scrape\nmetrics")

Rel_Flow(OTC, Loki, logs)
Rel_Flow(Loki, Grafana, logs)
Rel_Flow(OTC, Prometheus, metrics)
Rel_Flow(Prometheus, Grafana, metrics)
Rel_Flow(OTC, Zipkin, spans)

@enduml