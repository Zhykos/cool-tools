name: fr-zhykos-cool-tools-infra

x-backend: &papermerge-common
  image: papermerge/papermerge:3.1
  environment:
    PAPERMERGE__SECURITY__SECRET_KEY: 12345
    PAPERMERGE__AUTH__USERNAME: admin
    PAPERMERGE__AUTH__PASSWORD: admin
    PAPERMERGE__REDIS__URL: redis://papermerge-redis:6379/0
    PAPERMERGE__SECURITY__TOKEN_EXPIRE_MINUTES: 518400 # 1 year
  volumes:
    - papermerge-data:/db
    - papermerge-index_db:/core_app/index_db
    - papermerge-media:/core_app/media

x-kong-config: &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD_FILE: /run/secrets/kong_postgres_password

services:

  prometheus:
    image: prom/prometheus:v2.53.0
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/targets/otel_targets.yml:/etc/prometheus/targets/otel_targets.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
      - "9091:9091"
    expose:
      - "9090"
      - "9091"

  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib:0.104.0
    command:
      - --config=/etc/otel/receivers.yml
      - --config=/etc/otel/processors.yml
      - --config=/etc/otel/exporters.yml
      - --config=/etc/otel/service.yml
    volumes:
      - ./opentelemetry:/etc/otel:ro
      - ../UserAPI/logs:/logs
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:13133/healthz || exit 1
      interval: 15s
      timeout: 10s
      retries: 5
    ports:
      - "13133:13133" # health check
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    expose:
      - "4317"
      - "4318"
      - "13133"
    depends_on:
      - zipkin

  loki:
    image: grafana/loki:3.4.3
    restart: unless-stopped
    environment:
      - LOKI_RETENTION_PERIOD=90d
    command:
      - -config.file=/etc/loki/local-config.yaml
      - -config.expand-env=true
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1
      interval: 15s
      timeout: 10s
      retries: 5
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana:10.0.3
    user: '472'
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_USERS_ALLOW_SIGN_UP: false
    logging:
      driver: local
      options:
        max-size: 10m
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      loki:
        condition: service_healthy
      opentelemetry-collector:
        condition: service_started

  zipkin:
    image: openzipkin/zipkin:3.5.0
    restart: always
    ports:
      - "9411:9411"
    expose:
      - "9411"

  postgres-products:
    image: postgres:17.4-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    volumes:
      - ./postgres/init-products.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "9012:5432"

  mongo-orders:
    image: mongo:7-jammy
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "9014:27017"

  zookeeper:
    image: zookeeper:3.9.2-jre-17
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "orders:1:1"

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    ports:
      - 8085:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: orders
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  papermerge-web:
    <<: *papermerge-common
    ports:
      - "12000:80"
    depends_on:
      - papermerge-redis

  papermerge-worker:
    <<: *papermerge-common
    command: worker

  papermerge-redis:
    image: redis:7

  fake-smtp:
    image: inbucket/inbucket:sha-504a79a
    ports:
      - '2500:2500' # SMTP
      - '9000:9000' # web interface
      - '1100:1100' # POP3

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:3.7.1}"
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:3.7.1}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    secrets:
      - kong_postgres_password
    restart: on-failure

  kong-config:
    build: ./kong
    depends_on:
      - kong
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:3.7.1}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_ADMIN_GUI_URL: "${KONG_ADMIN_GUI_URL:-http://localhost:8002}"
      KONG_ADMIN_GUI_API_URL: "${KONG_ADMIN_GUI_API_URL:-http://localhost:8001}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    secrets:
      - kong_postgres_password
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "8001:8001/tcp"
      - "8444:8444/tcp"
      - "8002:8002"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./kong:/opt/kong
    security_opt:
      - no-new-privileges

  kong-db:
    image: postgres:17.4-alpine
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_postgres_password
    secrets:
      - kong_postgres_password
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - kong_data:/var/lib/postgresql/data

  excalidraw:
    container_name: excalidraw
    image: excalidraw/excalidraw:latest
    ports:
      - "3030:80"
    restart: on-failure

secrets:
  kong_postgres_password:
    file: ./POSTGRES_PASSWORD

volumes:
  prometheus_data: {}
  loki_data: {}
  grafana_data: {}
  papermerge-data:
  papermerge-index_db:
  papermerge-media:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs