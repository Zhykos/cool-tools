name: fr-zhykos-demo-opt-infra

services:

  prometheus:
    image: prom/prometheus:v2.53.0
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/targets/otel_targets.yml:/etc/prometheus/targets/otel_targets.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
      - "9091:9091"
    expose:
      - "9090"
      - "9091"

  opentelemetry-collector:
    image: otel/opentelemetry-collector-contrib:0.104.0
    command:
      - --config=/etc/otel/receivers.yml
      - --config=/etc/otel/processors.yml
      - --config=/etc/otel/exporters.yml
      - --config=/etc/otel/service.yml
    volumes:
      - ./opentelemetry:/etc/otel:ro
      - ../UserAPI/logs:/logs
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:13133/healthz || exit 1
      interval: 15s
      timeout: 10s
      retries: 5
    ports:
      - "13133:13133" # health check
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    expose:
      - "4317"
      - "4318"
      - "13133"
    depends_on:
      - zipkin

  loki:
    image: grafana/loki:3.1.0
    restart: unless-stopped
    environment:
      - LOKI_RETENTION_PERIOD=90d
    command:
      - -config.file=/etc/loki/local-config.yaml
      - -config.expand-env=true
    volumes:
      - ./loki/local-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1
      interval: 15s
      timeout: 10s
      retries: 5
    ports:
      - "3100:3100"

  grafana:
    image: grafana/grafana:10.0.3
    user: '472'
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
      GF_USERS_ALLOW_SIGN_UP: false
    logging:
      driver: local
      options:
        max-size: 10m
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      loki:
        condition: service_healthy
      opentelemetry-collector:
        condition: service_started

  zipkin:
    image: openzipkin/zipkin:3.4.0
    restart: always
    ports:
      - "9411:9411"
    expose:
      - "9411"

  postgres-products:
    image: postgres:16.3-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: db
    volumes:
      - ./postgres/init-products.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "9012:5432"

  mongo-orders:
    image: mongo:7-jammy
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    ports:
      - "9014:27017"

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "orders:1:1"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8085:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: orders
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

volumes:
  prometheus_data: { }
  loki_data: {}
  grafana_data: {}